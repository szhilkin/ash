head     1.1;
access   ;
symbols  LINLIB_3:1.1;
locks    ;
comment  @ * @;


1.1
date     90.12.27.16.28.49;  author vsv;  state Rel;
branches ;
next     ;


desc
@
@



1.1
log
@ВЕРСИЯ LINLIB_3
@
text
@/*
**      +----------+    БИБЛИОТЕКА ВВОДА-ВЫВОДА
**     (c) linlib  !    ДЛЯ АЛФАВИТНО-ЦИФРОВЫХ
**      +----------+    ВИДЕОТЕРМИНАЛОВ
**/

/*
 *      $Header: lin150.c,v 3.3 89/08/29 15:14:37 vsv Rel $
 *
 *      $Log:	lin150.c,v $
 * Revision 3.3  89/08/29  15:14:37  vsv
 * ВЕРСИЯ LINLIB_3
 *
 * Revision 3.2  88/07/28  09:25:47  vsv
 * ДОБАВЛЕНА ФУНКЦИЯ w_strn
 *
 * Revision 3.1  88/05/23  10:24:45  vsv
 * ИСПРАВЛЕНЫ МЕЛКИЕ ПЛЮХИ ВАРИАНТА ДЛЯ RT-11
 *
 * Revision 3.0  87/12/21  12:16:07  vsv
 * ПРЕДВАРИТЕЛЬНЫЙ ВЫПУСК.
 *
 */

#include <stdio.h>
#include "line.h"

/*
**      ВЫВОД НА ЭКРАН СТРОК В КОДАХ ТЕРМИНАЛА
**      И С ПЕРЕКОДИРОВКОЙ (ПО РЕЖИМАМ ДРАЙВЕРА)
**/

#ifdef RT11
/*
 * ДЛЯ RT-11 НЕ ИМЕЕТ СМЫСЛА ДЕЛАТЬ ВСЮ ЭТУ ОБРАБОТКУ,
 * ЗДЕСЬ ПРОСТО ЗАГЛУШКИ.
 */

w_raw(s)
register char *s;
{
	fprintf(vttout, "%s", s);
}

w_str(s)
register char *s;
{
	fprintf(vttout, "%s", s);
}

w_strn(s, n)
register char *s;
register int n;
{
	n -= strlen(s);
	fprintf(vttout, "%s", s);
	while(--n>=0) w_chr(' ');
}

w_chr(c)
register int c;
{
	putc(c, vttout);
}


int escseq(c)
register int c;
{
	return(c);
}

#endif RT11
#ifdef DEMOS2
#include <sgtty.h>

extern  int osgflg;             /* ФЛАГИ ДРАЙВЕРА (old.sg_flags) */

/*--------------------------------*/
/* ВЫВОД СТРОКИ В КОДАХ ТЕРМИНАЛА */
/*--------------------------------*/
/* на самом деле с предкомпенсацией,
 * так, чтобы драйвер снова перекодировал, a
 * терминал понял правильно...
 */
w_raw(s)
register char *s;
{
	register int c;
	for(; *s; s++) {
		c = *s;
		/* этого достаточно, потому что
		 * UCASE все равно подавлен :
		 */
		if(((osgflg & LCASE)!=0) && (c >= 0140) && (c < 0177))
			c |= 0200;
		putc( c, vttout );
	}
}

/*---------------------------------*/
/* ВЫДАТЬ СТРОКУ СИМВОЛОВ НА ЭКРАН */
/* С ПЕРЕКОДИРОВКОЙ                */
/*---------------------------------*/
/*
 * Исправляются символы, которых нет на
 * терминалах с двумя регистрами,
 * так, чтобы они занимали одну позицию,
 * и были на что-то похожи.
 */
w_str(s)
register char *s;
{

	for(; *s; s++) {
		w_chr(*s);
	}
}

w_strn(s, n)
/*---------------------------------------------------*/
/* ВЫДАТЬ СТРОКУ ЗАДАННОЙ ДЛИНЫ, ДОПОЛНИТЬ ПРОБЕЛАМИ */
/*---------------------------------------------------*/
register char *s;
register int n;
{
	n -= strlen(s);
	for(; *s; s++) {
		w_chr(*s);
	}
	while(--n>=0) w_chr(' ');
}

/*------------------------------------------*/
/* выдать символ с частичной перекодировкой */
/*------------------------------------------*/
w_chr(c)
register int c;
{
	extern int osgflg;
	register int oc;        /* символ для вывода */

	if(osgflg & LCASE) {
		switch(c) {
		case '`' :
			oc = '\'';
			break;
		case '{' :
			oc = '(';
			break;
		case '|' :
			oc = '!';
			break;
		case '}' :
			oc = ')';
			break;
		case '~' :
			oc = '^';
			break;
		default :
			oc = c;
			break;
		}
	} else {
		oc = c;
	}
	putc(oc, vttout);
}
/*---------------------------------------------*/
/* Перекодировть символ ESC-последовательности */
/*---------------------------------------------*/
/*
 * Примечание:
 *      когда появится драйвер, умеющий по таймауту
 *      определять, что символы входят в
 *      последовательность функциональной
 *      клавиши, отпадет необходимость в
 *      этой функции.
 */

int escseq(cod)
int cod;
{
	register int c;

	if((c=cod) <= 0177)
		return( c );
	c = 0177 & c;  /* избавиться от знакового разряда */
	if(c >= 0100 && c <= 0176) {
		if(osgflg & LCASE)  goto rev_cod;
		if(osgflg & CYRILL) {
		    switch(osgflg & CSTYLE) {
					/* КОД НЕ ПЕРЕВОРАЧИВАЕТСЯ */
		    case CBITS8   :
		    case CS_TYPE0 :
		    case CS_TYPE3 :
			break;
					/* ПРИХОДИТ ПЕРЕВЕРНУТЫЙ КОД */
		    case CS_TYPE2 :
		    case CS_TYPE1 :
			goto rev_cod;
			break;
		    };
		goto return_cod;
		}
	}
rev_cod:        /* перевернуть код */
	if(c >= 0100 && c <= 0137)
		c += 040;
	else
		c -= 040;
return_cod:
	return( c );
}
#endif DEMOS2
@
