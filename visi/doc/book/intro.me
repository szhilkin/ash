.he ''- % -'ВВЕДЕНИЕ'
.sh  1 "ВВЕДЕНИЕ"
.sh  2 "Интерфейс оператор-система в применении к современным мини- и \
персональным компьютерам."
.pp
Как известно, человек-оператор общается с компьютерной системой
через специальное устройство \*- терминал.
Исторически сложилось, что первым устройством в качестве
терминала использовался обычный телеграфный телетайп, то есть
пишущая машинка, оснащенная средствами связи по телеграфной линии.
Таким образом, внешне диалог выглядел примерно так:
оператор набирал на клавиатуре (печатал) некоторое заклинание (директиву),
а
.q мудрый
компьютер, точнее довольно глупая программа, с которой вели
диалог, отвечала что-либо более-менее вразумительное, например:
.(l
.q "ошибка, директива не распознана"
.)l
или что-то похлеще, вроде
.(l
.q "ОШ. К. 02"
.)l
что, по видимому, могло обозначать
.(l
.q "ошибка с кодом 02",
.)l
 не правда ли,
исчерпывающее пояснение к ошибке?
После такого сообщения ничего не оставалось делать,
как вновь набирать очередное заклинание.
Таким образом, для общения с
.q "искусственным интеллектом"
на такой технике от жрецов эры компьютеризации
требовались вполне определенные
способности и навыки, а именно:
.jp
знать несколько десятков, а то и сотен директив вместе с их
вариациями для разных особых случаев;
.jp
уметь печатать на клавиатуре;
.jp
иметь терпение ждать, пока ответ программы будет напечатан
на довольно медленном устройстве вывода на бумагу;
.pp
В пакетных операционных системах,
которые появились еще раньше диалоговых,
в принципе все выглядело
очень похоже, с той разницей, что все необходимые заклинания
собирались в одну (иногда довольно толстую) колоду перфокарт,
а ответ на все сразу получали позже,
например на следующий день в виде
распечатки со скоростного барабанного
.b АЦПУ .
Естественно, ошибка в самой первой перфокарте, пусть самая
незначительная, откладывала получение правильного ответа до
следующего прогона задания.
.pp
В современных компьютерных системах давно применяют терминалы
с экраном вместо печатающего устройства.
В простейшем случае программа ведет диалог с оператором так-же,
как и на телетайпе.
Оператор видит на экране печатаемый текст,
который с каждой новой строкой сдвигается вверх по экрану.
При этом на экране видны несколько последних строк,
а от остальных не остается никакого следа,
как только они исчезают
за верхней границей экрана.
.pp
Такие терминалы называются дисплеями.
Кроме простой имитации работы пишущей машинки они
умеют делать другие полезные вещи, доступные программисту:
.jp
гасить экран или его часть;
.jp
печатать текст в произвольном месте экрана;
.jp
выделять часть изображения яркостью, миганием или реверсированием
фона, и т.п.
.pp
Вследствие появления новых возможностей программисты
обычно стремятся ими пользоваться.
Так, например,
поскольку экран можно использовать как табло,
а не как простой участок свитка бумаги,
появляются диалоговые системы,
в которых форма
вывода на экран мало напоминает о родстве
дисплея с пишущей машинкой.
.pp
Наиболее широко расространенными диалоговыми системами для экранных
терминалов можно считать программы редактирования текста \\*-
экранные редакторы, или текстовые процессорыу.
.pp
Нельзя не упомянуть одно очень важное свойство экранных
терминалов, которое широко используется в подавляющем
большинстве экранных диалоговых систем.
Это курсор, то есть указатель места на экране,
в котором будут производиться некоторые изменения изображения.
В простейшем случае таким действием может быть печать новой литеры
взамен старой.
Дополнительно к этому все современные терминалы
имеют набор клавиш специально для перемещения курсора,
или специальное устройство,
теперь уже всем известные манипуляторы
"мышь" или "джойстик".
.pp
Таким образом, имеются достаточно серъезные средства
для создания на их основе систем,
в которых не так важны
навыки печати на клавиатуре и
знание набора директив.
.pp
Речь идет о диалоговых системах,
построенных на основе меню.
В таких системах на экране предлагается набор (список) действий,
а сам выбор производится при помощи минимального количества
нажатий на клавиши.
.pp
как правило, используется следующий принцип:
.(l C
.bx "подвести курсор, нажать клавишу выбора"
.)l
.pp
Дальнейшим развитием принципа меню можно считать так называемый
принцип непосредственного манипулирования,
когда не надо задумываться
о директивах, то есть названиях действий,
которые вам нужны в данный момент,
и даже не надо вчитываться в предлагаемое меню.
Нужно просто подвести курсор к нужной части изображения
и поменять ее состояние.
Важно, что набор клавиш при этом ограничен буквально парой
клавиш, так, что оператор сразу к ним привыкает
и перестает замечать.
.pp
Например, вместо печатания на клавиатуре директивы
"тормоз нажать" гораздо приятнее
нажимать педаль тормоза, при этом самое главное, что вы как оператор
привыкаете хотя бы к ее расположению, чтобы специально
не искать ее в критический момент.
.pp
Другой пример.
Работая с редактором текстов, конечно же, удобнее ввести новые
буквы поверх старых вместо использования заумной директивы
.q "заменить старый образец на новый" .
.pp
Обычно думают, что такие диалоговые системы рассчитаны на
начинающих пользователей.
Однако существуют системы,
которые
даже искушенному пользователю дают преимущества в виде
повышения скорости и надежности ведения диалога для рутинных,
часто используемых действий.
.pp
В качестве одного из лучших примеров таких программ можно
привести известный почти всем пользователям персональных компьютеров
.b "NORTON COMMANDER" .
.pp
А если говорить серьезно, то создание подобных систем
продиктовано не только необходимостью организации
доступа к ресурсам вычислительной техники все новых
и все менее подготовленных пользователей,
но и расширением количества используемых программ.
В последнем случае нужны как раз программы,
которые в лучшем случае вовсе не требуют
изучения никаких руководств, поскольку
либо редко используются, либо не должны застревать между
пальцами во время набора на клавиатуре длинных директив.
.sh 2 "Проблема инструментальных средств для построения \
диалоговых систем."
.pp
В силу исторических причин во всех популярных языках программирования
имеются определенные средства для организации диалога
в телеграфном стиле:
.i
напечатать, ввести строку.
преобразовать по формату,
.r
и т.п.
.pp
В принципе эти же запросы пригодны для организации ввода/вывода
с большинством видеотерминалов,
однако при этом необходимо знать конкретные команды
данного дисплея.
.pp
Итак, рассмотрим проблему создания программных средств,
использующих для организации диалога возможности современных
экранных видеотерминалов.
.pp
На самом деле у настоящих программистов
никаких проблем обычно не возникает.
важно понять, что нужно делать и для чего, далее программист
начинает кодировать  программу на каком-либо языке программирования.
В большинстве дисплеев управление экраном сводится к тому, что
на экран надо отпечатать команды в виде строк символов определенного
вида. например, чтобы погасить экран дисплея
.b vt52
(фирма DEC, США),
надо отпечатать на экран 2 символа кода
.b ASCII,
в котором
работает этот дисплей:
.(b
ESC J
.)b
.pp
однако на самом деле для этого терминала нужна еще команда
"установить курсор в начало экрана":
.(b
ESC H
.)b
.pp
Таким образом, полное гашение экрана можно сделать, выведя все четыре
символа на экран.
Вот пример программы на языке СИ:
.(b

/*--------------------------------*/
/* программа гашения экрана VT-52 */
/*--------------------------------*/

#include <stdio.h>

#define ESC 033

main()
{
	printf("%c%c", ESC, 'H');
	printf("%c%c", ESC, 'J');
	exit();
}
.)b

.pp
Аналогично выполняется команда установить курсор, с той разницей,
что надо каким-то образом сообщить дисплею номер строки и столбца,
в который устанавливается курсор.
Пример для терминала VT-52 на языке СИ:
.(b

/*
 * подпрограмма установки курсора VT-52
 */

#include <stdio.h>

#define ESC 033

curpos(col, lin)
int col, lin;
{
	printf("%c%c%c%c",
		ESC, 'Y',
		col+' ', lin+' ');
	return;
}

.)b
.pp
Как видно из примера, для установки курсора надо вывести
на экран четыре байта, которые задают номер строки и столбца.
Номер отсчитывается от левого верхнего угла экрана, начиная с нуля,
а код получается прибавлением номера строки к коду пробела.
Таким образом, пространство кодов номеров строк и позиций
команды установки курсора
.b VT-52
лежит в области печатных символов кода
.b ASCII.
Однако не всегда и не во всех случаях
все получается так просто.
Например, для почти полного аналога
.b VT-52
польского производства
.b СМ-7209 ,
не имеющего полного набора символов (только большие буквы),
драйвер операционной системы
.b ДЕМОС
преобразует символьный код,
и в данном случае
такая подпрограмма позиционирования курсора
будет немного "болеть". Болезнь будет проявляться в том,
что в некоторые позиции экрана курсор вообще нельзя будет
поставить.
.pp
В более общем виде  задача управления экраном решается не так
просто, если учесть, что существует очень много моделей экранных
терминалов, которые различаются командами управления.
.pp
Истинная проблема создания экранных программ заключается
именно в обеспечении переносимости готовой программы на другие
модели видеотерминалов и снижении связанных с этим расходов.
.pp
Другой подход связан с обеспечением стандартов на вновь
выпускаемое и приобретаемое терминальное оборудование,
так, чтобы не приходилось переделывать готовое программное обеспечение.
Однако такой путь менее реален не только потому, что программист
на него влияет в очень малой степени, но и в силу закономерностей
научно-технического  прогресса.
.pp
Более реальным подходом является обеспечение преемственности
развития, когда старые программы могут работать с новыми
дисплеями, пусть и не полностью используя их возможности,
а новые программы могут работать и на старых дисплеях за счет
потери вспомогательных качеств.
.pp
В настоящее время известно достаточное количество инструментальных
средств, предназначенных для создания различных программ.
Каждое из них предназначено, как правило, для определенных
видов диалоговых программ. как правило, существует
следующая тенденция:
.(l
либо обеспечивается достаточная универсальность,
либо удобство использования программистом.
.)l
.pp
В наиболее общем виде проблема выбора инструментальных средств
сводится к древнему спору о языках программирования и вообще о языках.
Известно, что на языке ассемблера можно запрограммировать
в принципе все, что угодно.
Однако для научно-технических расчетов удивительно живуч оказался
.b FORTRAN ,
а для задач искусственного интеллекта выбирают
.b LISP
или
.b PROLOG .
.pp
Аналогично, при помощи простейших экранных библиотек вроде
.b termcap
OC
.b UNIX
можно создавать все, что угодно,
однако для решения задач определенного класса
нужны средства более
высокого уровня, предоставляющие более крупные заготовки,
пусть и за счет снижения универсальности самих средств.

.sh 2 "Предполагаемая сфера применения инструментальных средств LINLIB"
.pp
Первоначально инструментальные средства
.b LINLIB
предназначались для создания интерактивных программ
для автоматизации эксперимента.
В таких системах необходимо сочетать несколько
довольно противоречивых
требований и предоставить следующий набор свойств:
.jp 1
управление аппаратурой в реальном масштабе времени;
.jp 2
обеспечить оператору достаточную гибкость для реализации управления
установкой (меню) в сочетании с хорошей скоростью
воздействия на управляемый процесс;
.jp 3
обеспечить наглядность и оперативность представления информации
о состоянии установки на экране дисплея;
.jp 4
обеспечить преемственность программного обеспечения
с развитием технической базы, включая смену модели терминала;
.jp 5
обеспечить единство стиля оформления диалога для различных программ
с целью создания сложных программно-технических комплексов;
.jp 6
предоставить программисту средства, простые в использовании и
позволяющие создавать программные средства,
не требующие от операторов специальной подготовки в области вычислительной
техники;
.pp
В целом все эти требования сводятся к простой идее -
использовать видеотерминал в качестве пульта управления
установкой для проведения эксперимента, и при создании программ
тратить как можно меньше усилий и средств.
.pp
Забегая наперед, можно отметить, что соблюдение этих требований
хотя и не так важно для обычных работ с компьютером,
однако позволяет создавать комплексы программ,
рассчитанные на самого неподготовленного пользователя,
либо
создавать удобный диалоговый интерфейс для редко
используемых операций благодаря наглядности и доступности диалога.

.sh 2 "Общее описание возможностей системы."
.pp
Система
.b LINLIB
прежде всего предназначена для программиста.
Поэтому я считаю, что недостаточно обеспечить только сервис для
пользователя готовой программы, не менее важно обеспечить
сервис для программиста. итак, начнем с принципов, положенных
в основу реализации.
.jp 1
Инструмент должен обеспечить создание программного продукта,
рассчитанного на экранный диалог, а также обеспечить
возможность использования обычного телеграфного стиля;
.jp 2
Должна быть обеспечена независимость от типа видеотерминала
в рамках опеределенного класса
(алфавитно-цифровые дисплеи формата 24 строки по 80 знаков),
а также
независимость поддержки плюс контроль зависимости
прикладных программ от типа операционной системы;
.jp 3
Технология создания готового программного продукта целиком опирается
на привычные средства
ОС
.b UNIX :
.i make ,
.i mkmf .
в качестве
языка программирования используется
.b Си .
иИспользуется любой стандартный редактор текстов,
нет никаких специальных редакторов форм.
.pp
Исполняющая библиотека имеет четко
выраженную иерархическую модульную структуру,
так что можно довольно легко управлять
размером загрузочного модуля.
Простой принцип:
.i
чем легче программисту,
тем труднее компьютеру;
.r
или другими словами,
средства
более низкого уровня входят как составная часть
в средства более высокого уровня.
.pp
Система позволяет переносимым способом описывать
работу с экраном на уровне примитивов:
.jp
вывод строк символов, строк управления;
.jp
установить курсор, видеоатрибуты;
.jp
погасить экран, часть экрана, конец строки от положения курсора;
.jp
прочитать код нажатой клавиши, включая специальные клавиши
(управление курсором, технологических).
.pp
Имеется возможность в рамках одного загрузочного модуля выполнять часть
диалога при помощи обычных запросов библиотеки
.b stdio
стандартной поддержки языка
.b Си .
Для этого предусмотрен запрос переключения вида диалога.
.pp
К средствам высокого уровня относятся функции
для работы с экранной формой.
Экранная форма содержит описание полей.
С каждым полем связана строка символов на экране.
.pp
Совокупное описание поля на экране, связанных с ним переменных
программы и способа форматного преобразования называется линией.
.pp
В зависимости от способа представления переменных на экране
и их предназначения линии различаются по типу:
.jp
комментарий (пояснение на экране);
.jp
простая переменная;
.jp
переключатель;
.jp
селектор меню;
.pp
Для повышения наглядности экранной формы широко применяются
видеоатрибуты, такие как реверсирование фона,
подчеркивание.
.pp
Существует большое разнообразие бидеотерминалов,
которые отличаются набором функциональных клавиш,
наличием и количеством видеоатрибутов,
а также символьной кодировкой.
Кроме того, значительно отличаются команды
управления терминалом, тикие, как погасить экран,
установить курсор.
.pp
Поддержка независимости от терминала опирается на систему
.b termcap
OC
.i UNIX .
Однако эта система предоставляет доступ к примитивным средствам управления
терминалом и программисту так или иначе приходится учитывать
многообразие терминалов на уровне прикладной программы.
При создании
.b LINLIB
сделана попытка по возможности
избавить программиста от этой заботы.
Для этого введены понятия:
.jp
"логический код клавиши"
.jp
"логический тип линии"
.jp
"логический видеоатрибут"
.jp
"ярлык" линии (подсказка)
.pp
Таким образом, программист акцентирует свое внимание на
смысловой стороне описания формы, кодов клавиш, а не
на эстетической и технической.
