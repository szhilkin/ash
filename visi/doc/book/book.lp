





                  Вовк Сергей Владимирович










           ИНСТРУМЕНТАЛЬНАЯ СИСТЕМА ДЛЯ СОЗДАНИЯ
                    ДИАЛОГОВЫХ ПРОГРАММ

                           _L_I_N_L_I_B






                    Описание применения



























         Димитровград (Мелекесс) - 29 Ноября 1994 г











ААННННООТТААЦЦИИЯЯ

     В даном документе описаны инструментальные средства для
создания диалоговых программ.  Инструментальная система ори-
ентирована на использование языка программирования ССии, пред-
назначена для создания интерактивных программных средств для
различных операционных систем  мини-  и  микро-ЭВМ.   Данное
руководство рассчитано на опытных программистов, для начина-
ющих требуется предварительное знакомство с языком ССии опера-
ционной системой _U_N_I_X.

























































                           -- 22 --


ППРРЕЕДДИИССЛЛООВВИИЕЕ

     Для начала несколько слов о языке, которым написано это
руководство.  Мне кажется, что книга, написанная программис-
том для программистов,  не  может  быть  сухим  канцелярским
документом.   Поэтому  просьба  отнестись  снисходительно  к
форме подачи этого довольно сложного материала,  а  также  к
возможным просчетам и неточностям.

     Кроме описания конкретной  инструментальной  системы  я
счел нужным поместить здесь же информацию журнального харак-
тера.  Для этого есть несколько причин.

     Во-первых, толковой литературы по данному вопросу очень
мало,  а  для  понимания  решаемых задач необходим некоторый
минимум сведений.

     Во-вторых,  предлагаемая  инструментальная  система  не
претендует  на истину в последней инстанции, скорее это один
из примеров решения, который может вдохновить Вас на  самос-
тоятельное творчество в этой области.

     Теперь о содержании книги.  В первых двух главах  гово-
рится  о  самой  проблеме создания диалоговых средств, далее
идет описание собственно библиотеки.  В  принципе,  материал
первых двух глав может быть мало интересен прикладному прог-
раммисту, в таком  случае  его  можно  бегло  просмотреть  и
начать  сразу с изучения LLIINNLLIIBB.  Описание построено двояко,
подобно известной книге по языку ССии Кернигана и Ричи.   Сна-
чала  приведено  несколько  примеров  использования  средств
самого доступного уровня, на основе которых можно приступить
к созданию своих собственных программ.  Далее идет постепен-
ная детализация описания, так что можно в любой момент прер-
вать изучение и продолжить практику.

     Таким образом, методика создания прикладных систем  при
помощи LLIINNLLIIBB хотя и не изложена специально, но, как я наде-
юсь, должна быть Вами усвоена, как итог изучения этого руко-
водства.

     Предлагаемая книга отражает  опыт  работы  по  созданию
диалоговых программных средств как для собственных нужд, так
и для передачи пользователям-непрограммистам,  в  том  числе
для самостоятельного использования без постоянных консульта-
ций со стороны авторов.

     В создании и отладке собственно инструметального  комп-
лекса  принимали участие многие коллеги в течение нескольких
лет, начиная с 1985 года.  За это время был пройден путь  от
простой вспомогательной
 иблиотеки для компилятора  ССИИ  DDEECCUUSS  операционной  системы
RRTT--1111  до  средств  поддержки языка описания диалога, доста-
точно инвариантного по отношению к  языку  программирования,
операционной системе, дисплейному оборудованию.
LLIINNLLIIBB                                   ООппииссааннииее ппррииммееннеенниияя








                           -- 33 --


     В настоящее время имеются варианты  инструментария  для
создания  прикладных  программ,  которые  достаточно неплохо
работают в среде операционных систем ДДЕЕММООСС версий 2.0,  2.1;
RRTT--1111 V04.00, V05.00, V05.02; MMSS--DDOOSS V3.20, V3.30.

     Самым ценным результатом всей проделанной работы  явля-
ется  тот  факт, что создание диалоговых программных средств
высокого качества для широкого спектра задач не представляет
особого  труда  для  участников  этой  работы, даже если они
теперь пользуются совершенно  другими  средствами,  например
TTUURRBBOO--PPRROOLLOOGG для IIBBMM--PPCC.

     Я надеюсь, что знакомство с этой книгой не доставит Вам
больших  неприятностей, наоборот, Вы имеете шанс извлечь для
себя хоть какую-то часть нашего опыта.







































LLIINNLLIIBB                                   ООппииссааннииее ппррииммееннеенниияя








                           -- 44 --


11..  ВВВВЕЕДДЕЕННИИЕЕ

11..11..  ИИннттееррффееййсс ооппееррааттоорр--ссииссттееммаа вв ппррииммееннееннииии кк  ссооввррееммеенннныымм
ммииннии-- ии ппееррссооннааллььнныымм ккооммппььююттеерраамм..

     Как известно, человек-оператор общается с  компьютерной
системой  через специальное устройство -- терминал.  Истори-
чески сложилось, что первым устройством в качестве терминала
использовался  обычный телеграфный телетайп, то есть пишущая
машинка, оснащенная средствами связи по  телеграфной  линии.
Таким образом, внешне диалог выглядел примерно так: оператор
набирал на клавиатуре (печатал) некоторое заклинание (дирек-
тиву),  а  "мудрый"  компьютер, точнее довольно глупая прог-
рамма, с которой вели диалог, отвечала что-либо  более-менее
вразумительное, например:

    "ошибка, директива не распознана"

или что-то похлеще, вроде

    "ОШ. К. 02"

что, по видимому, могло обозначать

    "ошибка с кодом 02",

 не правда ли,  исчерпывающее  пояснение  к  ошибке?   После
такого  сообщения  ничего  не  оставалось  делать, как вновь
набирать очередное заклинание.  Таким образом, для общения с
"искусственным  интеллектом"  на такой технике от жрецов эры
компьютеризации требовались вполне определенные  способности
и навыки, а именно:

     - знать несколько  десятков,  а  то  и  сотен  директив
       вместе с их вариациями для разных особых случаев;

     - уметь печатать на клавиатуре;

     - иметь терпение  ждать,  пока  ответ  программы  будет
       напечатан  на довольно медленном устройстве вывода на
       бумагу;

     В пакетных операционных системах, которые появились еще
раньше  диалоговых, в принципе все выглядело очень похоже, с
той разницей, что все необходимые  заклинания  собирались  в
одну  (иногда довольно толстую) колоду перфокарт, а ответ на
все сразу получали позже, например на следующий день в  виде
распечатки  со  скоростного  барабанного ААЦЦППУУ.  Естественно,
ошибка в самой первой перфокарте, пусть  самая  незначитель-
ная,  откладывала получение правильного ответа до следующего
прогона задания.

     В современных  компьютерных  системах  давно  применяют
терминалы   с  экраном  вместо  печатающего  устройства.   В
LLIINNLLIIBB                                   ООппииссааннииее ппррииммееннеенниияя








                           -- 55 --                    ВВВВЕЕДДЕЕННИИЕЕ


простейшем случае программа ведет диалог с  оператором  так-
же, как и на телетайпе.  Оператор видит на экране печатаемый
текст, который с каждой новой строкой  сдвигается  вверх  по
экрану.  При этом на экране видны несколько последних строк,
а от остальных не остается никакого следа,  как  только  они
исчезают за верхней границей экрана.

     Такие терминалы называются  дисплеями.   Кроме  простой
имитации  работы  пишущей  машинки  они  умеют делать другие
полезные вещи, доступные программисту:

     - гасить экран или его часть;

     - печатать текст в произвольном месте экрана;

     - выделять часть  изображения  яркостью,  миганием  или
       реверсированием фона, и т.п.

     Вследствие появления  новых  возможностей  программисты
обычно стремятся ими пользоваться.  Так, например, поскольку
экран можно использовать как табло, а не как простой участок
свитка  бумаги,  появляются  диалоговые  системы,  в которых
форма вывода на экран мало напоминает о  родстве  дисплея  с
пишущей машинкой.

     Наиболее широко расространенными диалоговыми  системами
для экранных терминалов можно считать программы редактирова-
ния текста \*- экранные редакторы, или  текстовые  процессо-
рыу.

     Нельзя не упомянуть одно очень важное свойство экранных
терминалов,  которое широко используется в подавляющем боль-
шинстве экранных диалоговых систем.   Это  курсор,  то  есть
указатель  места  на  экране,  в котором будут производиться
некоторые изменения изображения.  В простейшем случае  таким
действием  может  быть  печать  новой  литеры взамен старой.
Дополнительно к этому все современные терминалы имеют  набор
клавиш  специально  для перемещения курсора, или специальное
устройство, теперь уже всем  известные  манипуляторы  "мышь"
или "джойстик".

     Таким образом, имеются  достаточно  серъезные  средства
для  создания  на  их  основе систем, в которых не так важны
навыки печати на клавиатуре и знание набора директив.

     Речь идет о диалоговых системах, построенных на  основе
меню.   В  таких системах на экране предлагается набор (спи-
сок) действий, а сам выбор производится при помощи минималь-
ного количества нажатий на клавиши.

     как правило, используется следующий принцип:

           _п_о_д_в_е_с_т_и _к_у_р_с_о_р, _н_а_ж_а_т_ь _к_л_а_в_и_ш_у _в_ы_б_о_р_а

LLIINNLLIIBB                                   ООппииссааннииее ппррииммееннеенниияя








                           -- 66 --                    ВВВВЕЕДДЕЕННИИЕЕ


     Дальнейшим развитием принципа меню  можно  считать  так
называемый  принцип непосредственного манипулирования, когда
не надо задумываться о директивах, то есть названиях  дейст-
вий,  которые вам нужны в данный момент, и даже не надо вчи-
тываться в предлагаемое меню.  Нужно просто подвести  курсор
к  нужной части изображения и поменять ее состояние.  Важно,
что набор клавиш при этом ограничен буквально парой  клавиш,
так,  что  оператор  сразу к ним привыкает и перестает заме-
чать.

     Например,  вместо  печатания  на  клавиатуре  директивы
"тормоз  нажать"  гораздо  приятнее нажимать педаль тормоза,
при этом самое главное, что вы как оператор привыкаете  хотя
бы к ее расположению, чтобы специально не искать ее в крити-
ческий момент.

     Другой пример.  Работая с редактором  текстов,  конечно
же,  удобнее ввести новые буквы поверх старых вместо исполь-
зования  заумной  директивы  "заменить  старый  образец   на
новый".

     Обычно думают, что такие диалоговые системы  рассчитаны
на  начинающих  пользователей.   Однако  существуют системы,
которые даже искушенному пользователю  дают  преимущества  в
виде  повышения  скорости  и  надежности ведения диалога для
рутинных, часто используемых действий.

     В качестве одного из  лучших  примеров  таких  программ
можно привести известный почти всем пользователям персональ-
ных компьютеров NNOORRTTOONN CCOOMMMMAANNDDEERR.

     А если говорить серьезно, то создание  подобных  систем
продиктовано  не только необходимостью организации доступа к
ресурсам вычислительной техники все новых и все менее подго-
товленных пользователей, но и расширением количества исполь-
зуемых программ.  В последнем случае  нужны  как  раз  прог-
раммы,  которые  в  лучшем  случае вовсе не требуют изучения
никаких руководств, поскольку либо редко используются,  либо
не  должны застревать между пальцами во время набора на кла-
виатуре длинных директив.

11..22..  ППррооббллееммаа ииннссттррууммееннттааллььнныыхх ссррееддссттвв ддлляя ппооссттррооеенниияя  ддииаа--
ллооггооввыыхх ссииссттеемм..

     В силу исторических причин во  всех  популярных  языках
программирования имеются определенные средства для организа-
ции диалога в телеграфном стиле: _н_а_п_е_ч_а_т_а_т_ь, _в_в_е_с_т_и  _с_т_р_о_к_у.
_п_р_е_о_б_р_а_з_о_в_а_т_ь _п_о _ф_о_р_м_а_т_у, и т.п.

     В принципе эти  же  запросы  пригодны  для  организации
ввода/вывода с большинством видеотерминалов, однако при этом
необходимо знать конкретные команды данного дисплея.


LLIINNLLIIBB                                   ООппииссааннииее ппррииммееннеенниияя








                           -- 77 --                    ВВВВЕЕДДЕЕННИИЕЕ


     Итак, рассмотрим проблему создания программных средств,
использующих для организации диалога возможности современных
экранных видеотерминалов.

     На самом деле у настоящих программистов никаких проблем
обычно  не  возникает.  важно понять, что нужно делать и для
чего, далее программист начинает  кодировать   программу  на
каком-либо  языке  программирования.  В большинстве дисплеев
управление экраном сводится к тому, что на экран надо  отпе-
чатать  команды  в  виде  строк символов определенного вида.
например, чтобы погасить  экран  дисплея  vvtt5522  (фирма  DEC,
США), надо отпечатать на экран 2 символа кода AASSCCIIII,, в кото-
ром работает этот дисплей:

    ESC J


     однако на самом деле  для  этого  терминала  нужна  еще
команда "установить курсор в начало экрана":

    ESC H


     Таким образом, полное  гашение  экрана  можно  сделать,
выведя все четыре символа на экран.  Вот пример программы на
языке СИ:


    /*--------------------------------*/
    /* программа гашения экрана VT-52 */
    /*--------------------------------*/

    #include <stdio.h>

    #define ESC 033

    main()
    {
            printf("%c%c", ESC, 'H');
            printf("%c%c", ESC, 'J');
            exit();
    }



     Аналогично выполняется команда установить курсор, с той
разницей,  что  надо каким-то образом сообщить дисплею номер
строки и столбца, в который устанавливается курсор.   Пример
для терминала VT-52 на языке СИ:





LLIINNLLIIBB                                   ООппииссааннииее ппррииммееннеенниияя








                           -- 88 --                    ВВВВЕЕДДЕЕННИИЕЕ



    /*
     * подпрограмма установки курсора VT-52
     */

    #include <stdio.h>

    #define ESC 033

    curpos(col, lin)
    int col, lin;
    {
            printf("%c%c%c%c",
                    ESC, 'Y',
                    col+' ', lin+' ');
            return;
    }



     Как  видно  из  примера,  для  установки  курсора  надо
вывести на экран четыре байта, которые задают номер строки и
столбца.   Номер  отсчитывается  от  левого  верхнего   угла
экрана, начиная с нуля, а код получается прибавлением номера
строки к коду пробела.  Таким  образом,  пространство  кодов
номеров  строк  и  позиций  команды  установки курсора VVTT--5522
лежит в области печатных символов  кода  AASSCCIIII..   Однако  не
всегда и не во всех случаях все получается так просто.  Нап-
ример, для почти  полного  аналога  VVTT--5522  польского  произ-
водства ССММ--77220099, не имеющего полного набора символов (только
большие буквы), драйвер операционной системы ДДЕЕММООСС  преобра-
зует  символьный  код,  и в данном случае такая подпрограмма
позиционирования курсора  будет  немного  "болеть".  Болезнь
будет проявляться в том, что в некоторые позиции экрана кур-
сор вообще нельзя будет поставить.

     В более общем виде  задача управления экраном  решается
не так просто, если учесть, что существует очень много моде-
лей  экранных  терминалов,  которые  различаются   командами
управления.

     Истинная проблема создания экранных  программ  заключа-
ется именно в обеспечении переносимости готовой программы на
другие модели видеотерминалов и снижении  связанных  с  этим
расходов.

     Другой подход связан с обеспечением стандартов на вновь
выпускаемое  и приобретаемое терминальное оборудование, так,
чтобы не приходилось переделывать готовое программное  обес-
печение.   Однако  такой путь менее реален не только потому,
что программист на него влияет в очень малой степени, но и в
силу закономерностей научно-технического  прогресса.


LLIINNLLIIBB                                   ООппииссааннииее ппррииммееннеенниияя








                           -- 99 --                    ВВВВЕЕДДЕЕННИИЕЕ


     Более реальным подходом является  обеспечение  преемст-
венности  развития,  когда старые программы могут работать с
новыми дисплеями, пусть и не полностью используя их  возмож-
ности, а новые программы могут работать и на старых дисплеях
за счет потери вспомогательных качеств.

     В настоящее время известно достаточное количество инст-
рументальных средств, предназначенных для создания различных
программ.  Каждое из них  предназначено,  как  правило,  для
определенных видов диалоговых программ. как правило, сущест-
вует следующая тенденция:

    либо обеспечивается достаточная универсальность,
    либо удобство использования программистом.


     В наиболее общем виде проблема выбора  инструментальных
средств  сводится к древнему спору о языках программирования
и вообще о языках.  Известно, что на языке ассемблера  можно
запрограммировать  в  принципе  все, что угодно.  Однако для
научно-технических расчетов удивительно живуч оказался  FFOORR--
TTRRAANN,  а  для  задач искусственного интеллекта выбирают LLIISSPP
или PPRROOLLOOGG.

     Аналогично, при помощи  простейших  экранных  библиотек
вроде  tteerrmmccaapp  OC  UUNNIIXX  можно  создавать  все, что угодно,
однако для решения задач определенного класса нужны средства
более  высокого  уровня, предоставляющие более крупные заго-
товки,  пусть  и  за  счет  снижения  универсальности  самих
средств.


11..33..   ППррееддппооллааггааееммааяя  ссффеерраа   ппррииммееннеенниияя   ииннссттррууммееннттааллььнныыхх
ссррееддссттвв LLIINNLLIIBB

     Первоначально инструментальные средства LLIINNLLIIBB предназ-
начались для создания интерактивных программ для автоматиза-
ции эксперимента.  В таких системах необходимо сочетать нес-
колько  довольно  противоречивых  требований  и предоставить
следующий набор свойств:

1    - управление аппаратурой в реальном масштабе времени;

2    - обеспечить оператору достаточную гибкость для  реали-
       зации  управления  установкой  (меню)  в  сочетании с
       хорошей скоростью воздействия на управляемый процесс;

3    - обеспечить наглядность и оперативность  представления
       информации о состоянии установки на экране дисплея;

4    - обеспечить преемственность программного обеспечения с
       развитием технической базы, включая смену модели тер-
       минала;

LLIINNLLIIBB                                   ООппииссааннииее ппррииммееннеенниияя








                           -- 1100 --                   ВВВВЕЕДДЕЕННИИЕЕ


5    - обеспечить единство стиля оформления диалога для раз-
       личных  программ с целью создания сложных программно-
       технических комплексов;

6    - предоставить программисту средства, простые в исполь-
       зовании и позволяющие создавать программные средства,
       не требующие от операторов специальной  подготовки  в
       области вычислительной техники;

     В целом все эти требования сводятся к  простой  идее  -
использовать  видеотерминал  в  качестве  пульта  управления
установкой для проведения эксперимента, и при создании прог-
рамм тратить как можно меньше усилий и средств.

     Забегая наперед, можно отметить,  что  соблюдение  этих
требований хотя и не так важно для обычных работ с компьюте-
ром, однако позволяет создавать комплексы программ,  рассчи-
танные на самого неподготовленного пользователя, либо созда-
вать удобный диалоговый  интерфейс  для  редко  используемых
операций благодаря наглядности и доступности диалога.


11..44..  ООббщщееее ооппииссааннииее ввооззммоожжннооссттеейй ссииссттееммыы..

     Система LLIINNLLIIBB прежде всего предназначена для  програм-
миста.  Поэтому я считаю, что недостаточно обеспечить только
сервис для пользователя готовой программы,  не  менее  важно
обеспечить  сервис  для программиста. итак, начнем с принци-
пов, положенных в основу реализации.

1    - Инструмент должен  обеспечить  создание  программного
       продукта,  рассчитанного  на экранный диалог, а также
       обеспечить возможность использования обычного  телег-
       рафного стиля;

2    - Должна быть обеспечена независимость от  типа  видео-
       терминала  в рамках опеределенного класса (алфавитно-
       цифровые дисплеи формата 24 строки по 80  знаков),  а
       также  независимость  поддержки плюс контроль зависи-
       мости прикладных программ от типа  операционной  сис-
       темы;

3    - Технология создания  готового  программного  продукта
       целиком  опирается  на  привычные  средства  ОС UUNNIIXX:
       _m_a_k_e,  _m_k_m_f.   в  качестве   языка   программирования
       используется  ССии.   иИспользуется  любой  стандартный
       редактор текстов, нет никаких специальных  редакторов
       форм.

     Исполняющая библиотека имеет четко выраженную  иерархи-
ческую  модульную  структуру,  так  что можно довольно легко
управлять размером загрузочного  модуля.   Простой  принцип:
_ч_е_м  _л_е_г_ч_е _п_р_о_г_р_а_м_м_и_с_т_у, _т_е_м _т_р_у_д_н_е_е _к_о_м_п_ь_ю_т_е_р_у; или другими
словами, средства более низкого уровня входят как  составная
LLIINNLLIIBB                                   ООппииссааннииее ппррииммееннеенниияя








                           -- 1111 --                   ВВВВЕЕДДЕЕННИИЕЕ


часть в средства более высокого уровня.

     Система позволяет переносимым способом описывать работу
с экраном на уровне примитивов:

     - вывод строк символов, строк управления;

     - установить курсор, видеоатрибуты;

     - погасить экран, часть экрана, конец строки от положе-
       ния курсора;

     - прочитать код нажатой  клавиши,  включая  специальные
       клавиши (управление курсором, технологических).

     Имеется возможность в рамках одного загрузочного модуля
выполнять  часть диалога при помощи обычных запросов библио-
теки ssttddiioo стандартной поддержки языка ССии.  Для  этого  пре-
дусмотрен запрос переключения вида диалога.

     К  средствам  высокого  уровня  относятся  функции  для
работы  с экранной формой.  Экранная форма содержит описание
полей.  С каждым полем связана строка символов на экране.

     Совокупное описание поля на  экране,  связанных  с  ним
переменных  программы  и  способа  форматного преобразования
называется линией.

     В зависимости от способа  представления  переменных  на
экране и их предназначения линии различаются по типу:

     - комментарий (пояснение на экране);

     - простая переменная;

     - переключатель;

     - селектор меню;

     Для повышения наглядности экранной формы широко  приме-
няются видеоатрибуты, такие как реверсирование фона, подчер-
кивание.

     Существует большое разнообразие бидеотерминалов,  кото-
рые  отличаются  набором  функциональных  клавиш, наличием и
количеством видеоатрибутов, а также  символьной  кодировкой.
Кроме того, значительно отличаются команды управления терми-
налом, тикие, как погасить экран, установить курсор.

     Поддержка независимости от терминала опирается на  сис-
тему tteerrmmccaapp OC _U_N_I_X.  Однако эта система предоставляет дос-
туп к примитивным средствам управления терминалом и програм-
мисту так или иначе приходится учитывать многообразие терми-
налов на уровне прикладной программы.  При  создании  LLIINNLLIIBB
LLIINNLLIIBB                                   ООппииссааннииее ппррииммееннеенниияя








                           -- 1122 --                   ВВВВЕЕДДЕЕННИИЕЕ


сделана попытка по возможности избавить программиста от этой
заботы.  Для этого введены понятия:

     - "логический код клавиши"

     - "логический тип линии"

     - "логический видеоатрибут"

     - "ярлык" линии (подсказка)

     Таким образом, программист акцентирует свое внимание на
смысловой  стороне  описания  формы,  кодов  клавиш, а не на
эстетической и технической.








































LLIINNLLIIBB                                   ООппииссааннииее ппррииммееннеенниияя








                           -- 1133 --    ООббеессппееччееннииее ммооббииллььннооссттии


22..  ООббеессппееччееннииее ммооббииллььннооссттии ддииааллооггооввыыхх ппррооггрраамммм

     Здесь в самом общем виде изложено  большинство  проблем
общего  подключения  терминала, которые присущи как печатаю-
щим, так и экранным терминалам.  Причем большинство  из  них
известно  только  системным программистам и возникает только
во время настройки системы.

     Для прикладного  программиста  эти  проблемы  не  столь
заметны,  так  как  если  он использует стандартные средства
библиотек ввода/вывода, например, пакет ssttddiioo языка  СИ,  то
большинство проблем решаются на уровне стандартной поддержки
в драйвере терминала, и  на  пользовательском  уровне  никак
себя не проявляют.

     Я считаю принципиально важным остановиться подробно  на
проблеме обеспечения мобильности прикладных программ в части
зависимости от типа терминала.  Эта проблема не такая  прос-
тая.  Мне  попадались примеры программ, которые демонстриро-
вали отличную идею, но их реализация была выполнена недоста-
точно  качественно, например их было вообще невозможно прис-
пособить к некоторым терминалам.  В результате как ни заман-
чиво было их применять, от них приходилось отказываться.

     Для коммерческих программ игнорирование проблемы  пере-
носимости чревато снижением тиража и, как следствие, потерей
части прибыли.  Конечно же, для написания  программ  ограни-
ченного  применения,  рассчитанных,  как  правило,  на один-
единственный тип терминала, да еще и в условиях некоммерчес-
кой деятельности программиста (в свое удовольствие), решение
проблем переносимости только мешает получать максимум  этого
самого удовольствия.

     Наиболее последовательно проблема  переносимости  реша-
лась в среде операционной системы UUNNIIXX..

     Использование терминалов с  кириллицей  вызывает  новый
поток  проблем, но в какой-то мере и они решаются в операци-
онной системе ДДЕЕММООСС,, которая расширена по сравнению  с  UUNNIIXX
средствами работы со стандарными символьными кодами отечест-
венных терминалов.

     В силу исторических причин наиболее  полно  поддержива-
ется  телеграфный  стиль  диалога.   Рассмотрим подробно эти
средства, начиная от  аппаратуры  подключения  терминалов  к
ЭВМ.   Терминал  может  быть подключен либо по параллельному
каналу, либо по последовательному, либо через модем.   Обмен
с ЭВМ может быть посимвольный, как на СМ ЭВМ, либо кадровый,
как на ЕС ЭВМ, в обоих случаях принципы организации  диалога
значительно  отличаются, здесь рассматривается только посим-
вольный обмен.  В современных персональных компьютерах обмен
с  экраном  терминала построен на другом принципе.  Видеопа-
мять доступна  программисту,  как  обычное  адресное  прост-
ранство,  вследствие  чего многие проблемы, о которых пойдет
LLIINNLLIIBB                                   ООппииссааннииее ппррииммееннеенниияя








                           -- 1144 --    ООббеессппееччееннииее ммооббииллььннооссттии


речь ниже, к персональным компьютерам имеют  слабое  отноше-
ние.   Однако следует заметить, что использование персональ-
ного компьютера в качестве терминала другой  ЭВМ,  например,
при  помощи  программы  PPRROOCCOOMMMM,  наталкивает на аналогичные
проблемы.

     Для системного программиста важно знать,  какой  способ
обмена  применяется -- синхронный либо асинхронный, дуплекс-
ный либо полудуплексный.

     Полудуплексное подключение, когда вводимый с клавиатуры
символ  немедленно появляется на устройстве вывода терминала
и одновременно уходит по линии  связи  в  ЭВМ,  в  настоящее
время практически не применяется.  Как правило, все символы,
набираемые  на  клавиатуре,  появляются  на  экране  или  на
печати, пройдя по линии связи до ЭВМ и обратно.  Такое отоб-
ражение вводимых символов называют эхопечатью.  Далее, синх-
ронный   или   асинхронный  обмен  предполагает  координацию
ввода/вывода терминала.  Обычно большинство терминалов  поз-
воляют  набирать  текст  одновременно  с  выводом  на экран.
Кроме того,  существует  опасность  возникновения  ситуации,
когда  терминал не успевает правильно принимать и отображать
символы и специальные команды, и наоборот, ЭВМ  не  успевает
обрабатывать поступающие с клавиатуры символы.

     Синхронный способ обмена подразумевает передачу  специ-
ального аппаратного сигнала ГГООТТООВВ//ННЕЕГГООТТООВВ.
Вывод на экран продолжается, пока терминал  выставил  сигнал
ГГООТТООВВ.

При асинхронном подключении вывод продолжается до  тех  пор,
пока  приемный  буфер не заполнится, о чем терминал сообщает
по линии подключения клавиатуры посылкой символа
ППЕЕРРЕЕДДААЧЧУУ ООССТТААННООВВИИТТЬЬ ((XXOOFFFF)).  После того, как терминал  отра-
ботает принятые символы из буфера, он сообщает символом
ППЕЕРРЕЕДДААЧЧУУ ППРРООДДООЛЛЖЖИИТТЬЬ ((XXOONN Такой способ  подключения  называют
"с проtoколом XON/XOFF".

     Для чего все это здесь  рассказано?   Представьте,  как
будет  происходить  работа  за терминалом, у которого режимы
драйвера и способ подключения не совпадают.   Если  терминал
работает  в  полудуплексном  режиме, а драйвер в дуплексном,
вероятно,  что  каждый  набранный  символ  будет   напечатан
дважды.   В  худшем  случае  будет смесь символов, которые с
опозданием печатаются эхо, и символов, набираемых вами  сей-
час!  Однако выявить ошибки подключения синхронно/асинхронно
иногда бывает значительно сложнее.  Самая худшая ситуация --
когда  на  терминале  печатаются не все символы, которые ЭВМ
отправила по линии связи, либо  команды  управления  дислеем
искажены  настолько, что образуют команду, которая например,
переводит дисплей в астономный режим!

     К сожалению, до сих пор встречаются дисплеи, с которыми
невозможно справиться друими способами, можно только снижать
LLIINNLLIIBB                                   ООппииссааннииее ппррииммееннеенниияя








                           -- 1155 --    ООббеессппееччееннииее ммооббииллььннооссттии


скорость обмена по линии связи, поскольку они не могут  быть
синхронизированы  никаким  способом.   Такое  бывает,  когда
дисплей подключен по 3-х проводной линии связи RRSS--223322  ((ссттыыкк
СС--22))  и не умеет работать с протоколом XXOONN//XXOOFFFF.  Существует
другой способ правильно работать с ними, не снижая  полезной
скорости обмена.  Такие дисплеи, как правило, медленно отра-
батывают специальные  команды  управления:  погасить  экран,
прокрутить текст и т.п.  В драйвере терминала имеется собст-
венно возможность задержать вывод после выдачи  определенных
кодов, например "перевод строки".  В системе tteerrmmccaapp имеется
возможность  описать  соответствующие  задержки   для   всех
команд.   Однако,  по  видимому,  далеко не каждая программа
пользуется этой возможностью.

     Так или иначе, все эти проблемы переходят и к видеотер-
миналам.   Проблема усугубляется тем, что для экранных прог-
рамм обычно надо отключать многие стандартные  режимы  драй-
вера,  такие  как эхопечать, накопление вводимой строки и ее
редактирование в драйвере, и т.д.   В  результате  обработку
многих  режимов  приходится  выносить  на уровень прикладной
программы, а значит, и проблему совместимости решать  самому
прикладному программисту.

     Существует  еще  одна  проблема,  связанная  с  выдачей
управляющих  последовательностей  (команд дисплея) на терми-
налы, работающие с кириллицей.   Как  известно,  в  драйвере
терминала  ДДЕЕММООСС  имеются  режимы  для поддержки терминалов,
работающих в коде  AASSCCIIII,,  ККООИИ--77,,  ККООИИ--88..   Для  внутреннего
представления информации используется код ККООИИ--88,, подмножест-
вом которого является код AASSCCIIII (КОДЫ 000-0177).  При выводе
на терминал все символы отображаются в символы соответствую-
щего набора.  Особо неприятным способом  это  проявляется  в
режиме  работы  с  совмещенной  таблицей ККООИИ--77..  Если просто
отпечатать на экран команду управления  дисплеем,  то  можно
получить  совсем  не  то,  что  ожидается.  Например, вместо
одной буквы верхнего регистра будет  напечатано  два  знака,
вместо  маленькой буквы -- большая.  Вывод двух знаков можно
подавить, тогда при выводе литеры двух регистров не различа-
ются.  Однако есть несколько специальных символов, которые в
этом режиме все равно занимают две позиции.  Так,  например,
может  быть "сломана" строка установки курсора терминала VVTT--
5522..

     Видимо, когда  создавался  стандарт  tteerrmmccaapp,,  проблемы
выбора символьного кода для периферийного оборудования ЭВМ в
СССР мало волновали  разработчиков  в  США,  хотя  терминалы
только  с верхним регистром вполне еще могут где-то эксплуа-
тироваться и у них.  В СССР значительная доля парка термина-
лов приходится на терминалы, работающие с совмещенной табли-
цей ККООИИ--77,, поэтому проблему нельзя недооценивать и игнориро-
вать.

     Драйвер терминала ОС ДЕМОС  имеет  режим,  при  котором
перекодировки  на  выводе отключаются.  Этот режим как раз и
LLIINNLLIIBB                                   ООппииссааннииее ппррииммееннеенниияя








                           -- 1166 --    ООббеессппееччееннииее ммооббииллььннооссттии


предлагается в стандартных руководствах  для  выдачи  команд
управления  терминалом,  однако  для  выдачи обычного текста
драйвер надо возвращать в обычный режим.  При  этом  преиму-
щества  работы  с  буферизацией сводятся на нет, так как для
переключения  режимов   терминала   надо   ждать   окончания
ввода/вывода,  в результате программа очень медленно выводит
на экран.

     Существует еще одна довольно  неприятная  проблема  при
работе  с  терминалами, у которых клавиатура может генериро-
вать латинские и русские литеры двух регистров -- верхнего и
нижнего.   У  большинства  терминалов  отечественного произ-
водства почему-то принято,  что  коды  переключения  наборов
русского  и  английского  алфавитов,  отпечатанные на экран,
влияют на состояние клавиатуры.  Хотя при обычном  телеграф-
ном  стиле  работы  это  не очень досаждает, и драйвер имеет
соответствующий режим поддержки таких терминалов, при экран-
ной  работе,  например, в редакторе rreedd,, можно заметить, как
некоторые буквы набираются не в том  регистре,  в  каком  вы
хотите, причем совершенно в непредсказуемом порядке.  Налицо
все симптомы путаницы полудуплексного и дуплексного режимов,
причем избавиться от этого можно, только переделав сам дисп-
лей, точнее клавиатуру.  И что самое характерное,  терминалы
зарубежного производства, рассчитаные на работу с националь-
ными алфавитами (в том числе  кириллицу),  таким  неприятным
свойством не обладают.  Наоборот, код переключения алфавитов
при вводе с клавиатуры  передается,  как  обычный  код,  без
полудуплексных  эффектов,  а  код переключения при выводе на
экран не влияет на клавиатуру.

     Подвести итог под всеми этими проблемами  можно  такой.
Прикладному  программисту  просто не под силу разобраться со
всеми этими проблемами.  Мало того, он и  не  должен  разби-
раться  в  проблемах  системного  программиста.  Лучше, если
каждый занимается своим делом.  Проблема заключается в  том,
что качественных инструментальных средств катастрофически не
хватает.  Собственно, попытка создать свой собственный инст-
румент продиктована именно последним обстоятельством.
















LLIINNLLIIBB                                   ООппииссааннииее ппррииммееннеенниияя








                           -- 1177 --     ППррииммееррыы ддлляя ннааччииннааюющщиихх


33..  ННеессккооллььккоо ппррииммеерроовв ддлляя ннааччааллаа

     В этих примерах Вы найдете практически все,  что  может
понадобиться  для  начала  практической работы с библиотекой
LLIINNLLIIBB.  Необходимо сказать несколько слов о том,  как  выз-
вать компилятор _С_и и как читать тексты примеров программ.

     Компилятор вызывается стандартно, например

             cccc --oo pprroogg pprroogg..cc --lllliinnee --lltteerrmmlliibb

Для опытных программистов системы DDEEMMOOSS или UUNNIIXX все  доста-
точно  очевидно.  Текст программы размещается в файле с име-
нем pprroogg..cc, имя готовой программы  будет  pprroogg,  при  сборке
программы  используются  две  дополнительных  библиотеки  --
//uussrr//lliibb//lliibblliinnee..aa и //uussrr//lliibb//lliibbtteerrmmlliibb..aa.  Первая  библио-
тека  входит  в  набор системы LLIINNLLIIBB, а вторая -- это стан-
дартная библиотека для работы с терминалом через описание  в
файле //eettcc//tteerrmmccaapp.

     Теперь о стиле комментария в примерах.   Каждый  пример
представляет  собой  полностью  завершенную  программу, если
ничего другого не сказано.  В начале примера помещается ком-
ментарий,  где  сказано  о назначении программы, а также имя
файла, куда следует поместить текст примера.

     А теперь приступим к примерам.

33..11..  РРааббооттаа сс ээккрраанноомм ии ккллааввииааттуурроойй

____________________________________________________________

/*
 * erpag.c
 *
 * программа гашения экрана
 */

#include <stdio.h>
#include "line.h"

main()
{
        hw_set();
        io_set(IO_VIDEO);

        er_pag();

        io_set(IO_TTYPE);
        exit(0);
}
____________________________________________________________


LLIINNLLIIBB                                   ООппииссааннииее ппррииммееннеенниияя








                           -- 1188 --     ППррииммееррыы ддлляя ннааччииннааюющщиихх


     Итак, если Вы желаете иметь еще один вариант программы,
которая  гасит  экран  (имеется  в виду, что таких у Вас уже
несколько, как минимум это стандартная команда cclleeaarr  опера-
ционной  системы  _Д_Е_М_О_С ), наберите текст примера при помощи
редактора, сохраните его в файле eerrppaagg..cc, соберите программу
при помощи команды

            cccc --oo eerrppaagg eerrppaagg..cc --lllliinnee --lltteerrmmlliibb

Впрочем, совсем необязательно это делать вручную.   В  комп-
лекте  дистрибутива  LLIIBBLLIIBB  имеются все примеры на машинном
носителе.

     Теперь поясним строки примера одна за  другой.   Строка
"#include  <stdio.h>"  подключает  файл  описаний констант и
функций  стандартной  библиотеки  SSTTDDIIOO.   Строка  "#include
"line.h"" подключает файл описаний констант и функций библи-
отеки LLIINNLLIIBB.  Определение функции mmaaiinn содержит  последова-
тельные вызовы функций библиотеки LLIINNLLIIBB.

     Функция hhww__sseett Выполняет настройку на терминал, и  поэ-
тому  обязательно  должна  быть вызвана перед использованием
всех остальных функций LLIINNLLIIBB.

     Функция  iioo__sseett  управляет  режимами  ввода/вывода,   в
начале  она вызывается обычно для установки экранного режима
работы, а в конце для восстановления стандартных режимов.

     Функция eexxiitt в пояснениях не нуждается, а то,  что  как
раз и требовалось от этой программы, делает функция eerr__ppaagg.

33..22..  ВВввоодд ии ввыыввоодд ссттрроокк

33..33..  ВВввоодд ии ввыыввоодд ппееррееммеенннныыхх ппоо ффооррммааттаамм pprriinnttff

33..44..  ППееррееккллююччааттееллии

33..55..  ССммееннаа ккааддрроовв,, ммееннюю

33..66..  ППррооввееррккаа ввввооддаа ннооввыыхх ззннааччеенниийй

33..77..  ЭЭккззооттииккаа

                         СОДЕРЖАНИЕ



    АННОТАЦИЯ .........................................    1

    ПРЕДИСЛОВИЕ .......................................    2

1.  ВВЕДЕНИЕ ..........................................    4
1.1.  Интерфейс оператор-система в применении к  совре-
      менным мини- и персональным компьютерам. ........    4
LLIINNLLIIBB                                   ООппииссааннииее ппррииммееннеенниияя








                           -- 1199 --


1.2.  Проблема инструментальных средств для  построения
      диалоговых систем. ..............................    6
1.3.  Предполагаемая сфера применения  инструментальных
      средств LINLIB ..................................    9
1.4.  Общее описание возможностей системы. ............   10

2.  Обеспечение мобильности диалоговых программ .......   13

3.  Несколько примеров для начала .....................   17
3.1.  Работа с экраном и клавиатурой ..................   17
3.2.  Ввод и вывод строк ..............................   18
3.3.  Ввод и вывод переменных по форматам printf ......   18
3.4.  Переключатели ...................................   18
3.5.  Смена кадров, меню ..............................   18
3.6.  Проверка ввода новых значений ...................   18
3.7.  Экзотика ........................................   18






































LLIINNLLIIBB                                   ООппииссааннииее ппррииммееннеенниияя






