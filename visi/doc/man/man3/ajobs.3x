.TH AJOBS 3x AJOBS
.SH ИМЯ
ajobs, strt_j(), next_j(), quit()
\- ОРГАНИЗАЦИЯ СОПРОЦЕССОВ НА ЯЗЫКЕ СИ
.SH
.SH ФОРМАТ
.ES 5

#include <ajobs.h>

JCB jcb;

strt_j( job )
JCB *job;

next_j()

quit()

.EE

.SH ОПИСАНИЕ
.PP
Что такое асинхронное задание, показано на примере
в демонстрационной программе ldemo.
.PP
Обмен с основной программой осуществляется при помощи флагов
и общих данных. Для асинхронного задания выделяется пространство
стека статически, при помощи обычного об'явления массива типа unsigned,
либо динамически при помощи функции malloc,
поэтому существует проблема выбора размера стека.
.PP
Для описания асинхронного задания заполняют структуру
типа JCB (Job Control Block - блок управления задания),
в которой заданы границы стека, адрес функции задания, другая информация,
подробно см. комментарии в файле agobs.h, и пример ниже.
.PP
Функция strt_j включает в кольцевой список
блок управления задания, на который указывает аргумент job,
и запускает очередное асинхронное задание. Возможен запуск
и одновременное выполнение по кольцевой дисциплине обслуживания
нескольких асинхронных заданий.
.PP
В начале работы программы существует одно задание - это основная программа.
Отличие его от других заданий в том, что оно выполняет
запросы на чтение клавиатуры, и пользуется стеком,
выделенным системой.
Напротив, остальные задания
получают управление, когда основная программа неактивна.
.PP
Функция next_j служит для передачи управления от задания к заданию,
таким образом четко выделяются критичные участки каждого
асинхронного процесса.
Управление возвращается после однократного выполнения списка
заданий.
.PP
В принципе возможно организовать обращение к клавиатуре и из
других асинхронных заданий. В таком случае необходимо
предотвратить путаницу обращений к клавиатуре при помощи флагов.
.PP
В библиотеке LINLIB имеется два места стыковки
с механизмом асинхронных заданий. При вводе, в функции r_key,
если входная очередь пуста, вызывается next_j().
К вызову асинхронных заданий, таким образом, ведут
все функции, которые вызывают r_key - r_cod, r_line, r_page.
При выводе для предотвращения длительных перерывов
в работе асинхронного задания next_j вызывается в функции w_page
перед каждым обращением к w_line.
.SH "АССЕМБЛЕР"
Пакет написан на ассемблере,
содержит вызовы функций csv и cret. Для
переноса средств поддержки асинхронных заданий на
компьютеры другой архитектуры (не СМ-4), необходимо
разобраться с тонкостями реализации вызовов функций и стратегию
работы со стеком в языке си. Кроме того, даже на
компьютерах с одной и той же архитектурой может оказаться,
что различные компиляторы несовместимы между собой
именно по соглашениям о вызовах функций и работе со стеком.
В данной реализации
гарантируется, что после возврата из функции next_j, сохраняются все
переменные класса хранения auto, то есть обращение к другим
сопроцессам для каждого из них выглядит как вызов обычной функции.
.SH "ЗАМЕЧАНИЯ"
Остановить одно асинхронное задание из другого невозможно,
но можно, например, взвести флаг, по которому задание завершит свою работу.
.SH ПРИМЕРЫ
.ES

#include "ajobs.h"

/* флаг останова задания #1 */
int stop_j1 ;

/* стек для асинхронного задания */
static unsigned stack[0400] ;

static pgob1()
/*------------------------------*/
/* функция асинхронного задания */
/*------------------------------*/
{
    ...
    for ( ;; ) { /* бесконечный цикл */
	...
	if (stopj1) /* останов задания #1 ? */
		quit(); /* МОЖНО return; */
	...
	/* примеры асинхронных действий:
	 * опрос KAMAK;
	 * вывод индикации;
	 * ожидание завершения др. задачи wait2();
	 *  ...
	 */

	next_j(); /* выполнить другие задания */
	}
}

/* блок управления заданием */
JCB job1 = {
	JCBSIZ,0,0,0,0,
	&pgob1,         /* адрес функции */
	0,0,0,0,0,0,
	&stack[0400],   /* вершина стека */
	&stack[0],      /* дно стека */
	} ;


main()
{
...
 	strt_j ( &job1 ) ;
...
}

.EE
.SH ДОПОЛНИТЕЛЬНЫЕ ССЫЛКИ
stdio(2), ldemo(1), linlib(3x), lin1(3x), lin2(3x), lin3(3x), lin4(3x),
wait2(2).
.SH ДИАГНОСТИКА
Выход за пределы стека не контролируется, при этом возможны
любые исходы, вплоть до краха системы (в RT-11).
К сожалению, ситуация напоминает компьютерную игру "CORE WAR",
Поэтому при выборе размеров стека всегда лучше перестраховаться.
Нет другого способа, как опытным путем подобрать
минимально необходимый размер стека.
.SH ЗАМЕЧАНИЯ
Особенно ценным представляется использовать пакет для
не очень сложных
автономных задач, где не требуется никакой операционной системы.
Можно весь код задачи поместить в ПЗУ. Необходимо будет
лишь добавить стартовый код для настройки первоначального
значения стека и счетчика команд.
.PP
Следует соблюдать чувство меры при наисании участков, которые
не прерываются функцией next_j. Возможна ситуация, когда Ваша
программа перестанет слышать клавиатуру, например во время
цикла при ожидании события, которое не наступает. Пользуйтесь
чаше функцией next_j. Ее можно применять во всех функциях,
которые вызываются из основной процедуры асинхронного задания.
