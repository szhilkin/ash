visi/prog/proto/READ_ME

      +----------+    библиотека ввода-вывода
     (C) LINLIB  !    для алфавитно-цифровых
      +----------+    видеотерминалов

	В этом каталоге (visi/prog/proto) собраны
	файлы-прототипы прикладной программы.

--- Файлы исходных текстов:

pmain.c         головной модуль (без разбора аргументов main)
pmainv.cv       простейший пример экранного диалога (меню)

--- MAKE-файлы для сборки:
Makefile        для сборки не требуется установки
		компонент LINLIB на стандартные места;
		include-файлы и библиотеки подключаются
		из каталогов ../../include и ../../lib

Makefile-std    все компоненты LINLIB уже установлены
		на стандартные места;
		include-файлы должны быть в каталоге
		/usr/include, а библиотеки подключаются так:
		ld ... -linusr -lline

--- ЧТО ЖЕ НАДО СДЕЛАТЬ: ---

Создайте новый каталог (например proto2), скопируйте в него нужные файлы
и сделайте его текущим (войдите в него командой cd):

	вариант 1. LINLIB еще не установлен на стандартные места:
	mkdir ../proto2;
	cp Makefile *.c* ../proto2;
	cd ../proto2;

	вариант 2. LINLIB находится на стандартных местах:
	mkdir $HOME/proto2;
	cp Makefile-std $HOME/proto2/Makefile
	cp *.c* $HOME/proto2;
	cd $HOME/proto2;

После того, как вы все скопируете и перейдете в каталог
нового проекта, не забудьте выполнить команду
	make depend;

Убедитесь, что прототипные файлы транслируются и готовая
программа запускается:
	make all;
	proto;

Только после этого корректируйте файлы
и добавляйте свои. При добавлении новых файлов нет необходимости
вручную корректировать Makefile, достаточно использовать
команду
	make depend;

Поменять имя загрузочного модуля вашей команды
можно в диалоге с командой
	mkmf -i;


--- ЗАМЕЧАНИЯ ПО ПОВОДУ КОМАНДЫ MKMF ---

Полезно освежить в памяти документ на команду mkmf,
или обязательно с нею познакомиться.
Идеи, которые в ней реализованы, этого заслуживают.
К сожалению, эта команда не входит в стандартный набор
большинства версий Unix, но, к счастью, в Демос 2.0, Демос 2.1
она присутствует.

В документации (см. man mkmf) сказано, что команда mkmf
рассчитана на создание нового файла Makefile.
Однако это далеко не так.
Там все сказано правильно относительно
суффиксов, стандартных целей make, но все это больше
относится к стандартным прототипным файлам mkmf.
на самом деле команда mkmf просто проверяет наличие
в текущем каталоге файла 'Makefile' или указанного
ключом '-f', и при его отсутствии для начала копирует с
известного ей стандартного места прототипный файл.
  Самое интересное начинается после этого. Она обновляет
список исходных текстов, об'ектных модулей и даже позволяет
менять значения любых макропеременных, не прибегая к редактору
текстов. кроме того, некоторые макропеременные, такие как
MAKEFILE, она и сама правильно настраивает. в результате
значительно облегчается жизнь программиста, если
он принял правила хорошего тона Unix --
каталог ничего лишнего не содержит, один проект на один каталог,
все нужное для сборки в этом каталоге, а для сборки
используется make.
  В таком случае значительную часть рутинной работы
по содержанию вашего проекта в должном порядке берет на себя mkmf,
программисту остается только заниматься исходными текстами.
